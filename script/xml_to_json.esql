
-- opcua xml to json
CREATE COMPUTE MODULE OPCUA_XML_to_JSON
	-- XML namespaces
	DECLARE tie NAMESPACE 'com.ibm.acmfg.TriggerItemEvent/v1.0';
	DECLARE tit NAMESPACE 'com.ibm.acmfg.TriggerItem/v1.0';
	DECLARE rie NAMESPACE 'com.ibm.acmfg.ReadItemEvent/v1.0';
	DECLARE wie NAMESPACE 'com.ibm.acmfg.WriteItemEvent/v1.0';
	DECLARE cit NAMESPACE 'com.ibm.acmfg.ClientItem/v1.0';
	DECLARE civ NAMESPACE 'com.ibm.acmfg.ClientItemValue/v1.0';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--CALL CopyMessageHeaders();
		--CALL CopyEntireMessage();
		SET OutputLocalEnvironment = InputLocalEnvironment;
		-- variables
		DECLARE I INTEGER 1;
		DECLARE nb_items INTEGER 0;
		DECLARE is_trigger BOOLEAN EXISTS(InputRoot.XMLNSC.tie:Triggers[]);
		-- result JSON is Array
		CREATE FIELD OutputRoot.JSON.Data IDENTITY (JSON.Array)Data;
		IF is_trigger THEN
			SET nb_items = CARDINALITY(InputRoot.XMLNSC.tie:Triggers.tie:Trigger[]);
		ELSE
			SET nb_items = CARDINALITY(InputRoot.XMLNSC.rie:Items.rie:Item[]);
		END IF;
		-- loop on trigger items
		WHILE I <= nb_items DO
			-- create object so we can reference it
			SET OutputRoot.JSON.Data.Item[I].topic = '';
			IF is_trigger THEN
				CALL AddJSONItem(OutputRoot.JSON.Data.Item[I],InputRoot.XMLNSC.tie:Triggers.tie:Trigger[I].tie:Item);
			ELSE
				CALL AddJSONItem(OutputRoot.JSON.Data.Item[I],InputRoot.XMLNSC.rie:Items.rie:Item[I]);
			END IF;
			SET I = I + 1;
		END WHILE;
		RETURN TRUE;
	END;
	CREATE PROCEDURE AddJSONItem(IN json_item REFERENCE, IN xml_item REFERENCE)
	BEGIN
		SET json_item.topic = xml_item.cit:Source;
		CASE xml_item.cit:Value.civ:IIBType
		WHEN 'java.lang.String' THEN
			SET json_item.type = 'string';
			SET json_item.payload = xml_item.cit:Value.civ:Data;
		WHEN 'java.lang.Long' THEN
			SET json_item.type = 'number';
			SET json_item.payload = CAST(xml_item.cit:Value.civ:Data AS INTEGER);
		WHEN 'java.lang.Integer' THEN
			SET json_item.type = 'number';
			SET json_item.payload = CAST(xml_item.cit:Value.civ:Data AS INTEGER);
		WHEN 'java.lang.Short' THEN
			SET json_item.type = 'number';
			SET json_item.payload = CAST(xml_item.cit:Value.civ:Data AS INTEGER);
		WHEN 'java.lang.Double' THEN
			SET json_item.type = 'number';
			SET json_item.payload = CAST(xml_item.cit:Value.civ:Data AS FLOAT);
		WHEN 'java.lang.Float' THEN
			SET json_item.type = 'number';
			SET json_item.payload = CAST(xml_item.cit:Value.civ:Data AS FLOAT);
		WHEN 'java.math.BigDecimal' THEN
			SET json_item.type = 'number';
			SET json_item.payload = CAST(xml_item.cit:Value.civ:Data AS DECIMAL);
		WHEN 'java.lang.Boolean' THEN
			SET json_item.type = 'boolean';
			SET json_item.payload = CAST(xml_item.cit:Value.civ:Data AS BOOLEAN);
		ELSE
			SET json_item.type = 'Unknown Type: '||xml_item.cit:Value.civ:IIBType;
		END CASE;
		SET json_item.sourceTimestamp = xml_item.cit:Value.civ:SourceTime;
		SET json_item.serverTimestamp = xml_item.cit:Value.civ:ServerTime;
	END;
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;